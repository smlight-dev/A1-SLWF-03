esphome:
  name: a1-slwf-03-voice-assistant
  friendly_name: a1-slwf-03-voice-assistant
  project:
    name: slwf03.voice-assistant
    version: "1.0"
  min_version: 2023.11.1
  
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - delay: 5s  # Gives time for improv results to be transmitted

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "A1-Slwf-03-Voice-Assistant"
    password: "a1slwf03"

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

i2s_audio:
  i2s_lrclk_pin: GPIO15
  i2s_bclk_pin: GPIO14

microphone:
  - platform: i2s_audio
    id: slwf03_microphone
    i2s_din_pin: GPIO32
    adc_type: external
    pdm: true

voice_assistant:
  microphone: slwf03_microphone

binary_sensor:
  - platform: gpio
    name: "Voice"
    pin:
      number: GPIO26
      inverted: false
    on_press:
      - voice_assistant.start:
    on_release:
      - voice_assistant.stop:

# Uptime sensor register
sensor:
  - platform: uptime
    id: uptime_s
    update_interval: 60s
  
text_sensor:
  - platform: template
    name: "SLWF-03 Uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s
